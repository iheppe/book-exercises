print("Jello Worlb")
print("こんにちは")
print("你好")
print(myNum)
print(myNum)
myNum <- 201
print(myNum)
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price -> 600
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-05-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
source('~/Documents/GitHub/book-exercises-clone/chapter-06-exercises/exercise-1/exercise.R', echo=TRUE)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"]
total_not_men <- ticket_class_df[ticket_class_df$men == FALSE, "Freq"]
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (ticket_class_df)
}
survival <- calc_survival_rate("3rd")
source('~/Documents/GitHub/a3-using-data-iheppe/assignment.R', echo=TRUE)
source('~/Documents/GitHub/a3-using-data-iheppe/assignment.R', echo=TRUE)
data("Titanic") # saves R's data on the Titanic to the variable Titanic
View(Titanic) # shows the data
is.data.frame(Titanic) # checks whether or not the titanic dataset is a data frame (false)
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE) # loads the titanic
# dataset as a data frame
children <- titanic_df[titanic_df$Age == "Child", ] # creates a dataframe
#including only data about children
num_children <- sum(children[, "Freq"]) # counts the total number of children in the
#dataframe
print(num_children)
losses <- titanic_df[titanic_df$Survived == "No", ] # filters only for groups that did
# not survive
most_losses <- titanic_df[titanic_df$Freq == max(losses$Freq), ] # the demographic
# that experienced the most losses
print(most_losses)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"]
total_not_men <- ticket_class_df[ticket_class_df$men == FALSE, "Freq"]
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (ticket_class_df)
}
survival <- calc_survival_rate("3rd")
View(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"]
total_not_men <- ticket_class_df[ticket_class_df$men == FALSE, "Freq"]
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (not_men_survived)
}
survival <- calc_survival_rate("3rd")
View(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- ticket_class_df[ticket_class_df$men == FALSE, "Freq"]
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (not_men_survived)
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (not_men_survived)
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (total_not_men)
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (percentage_not_men)
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (paste0("Of ", ticket_class, " class, ", percentage_men, "% of men survived and ", percentage_else, "% of women and children survived."))
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (paste0("Of ", ticket_class, " class, ", percentage_men, "% of men survived and ", percentage_not_men, "% of women and children survived."))
}
survival <- calc_survival_rate("3rd")
print(survival)
calc_survival_rate <- function(ticket_class){
ticket_class_df <- titanic_df[titanic_df$Class == ticket_class, ]
ticket_class_df$men <- (ticket_class_df["Sex"] == "Male" & ticket_class_df["Age"] == "Adult")
men_survived <- sum(ticket_class_df[ticket_class_df$men == TRUE & ticket_class_df$Survived == "Yes", "Freq"])
total_men <- sum(ticket_class_df[ticket_class_df$men == TRUE, "Freq"])
percentage_men <- round(men_survived * 100 / total_men)
not_men_survived <- sum(ticket_class_df[ticket_class_df$men == FALSE & ticket_class_df$Survived == "Yes", "Freq"])
total_not_men <- sum(ticket_class_df[ticket_class_df$men == FALSE, "Freq"])
percentage_not_men <- round(not_men_survived * 100 / total_not_men)
return (paste0("Of ", ticket_class, " class, ", percentage_men, "% of men survived and ", percentage_not_men, "% of women and children survived."))
}
print(calc_survival_rate("3rd"))
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
setwd("~/")
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/book-exercises-clone/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some interesting questions about the dataset
# What was the mean grant value?
mean(grants[grants$total_amount, ])
# Use the View function to look at the loaded data
View(grants)
mean(grants[ ,grants$total_amount])
mean(grants[,grants$total_amount])
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
grants[grants$total_amount == max(grants$total_amount), grants$total_amount]
# What was the dollar amount of the largest grant?
grants[grants$total_amount == max(grants$total_amount), "total_amount"]
# What was the dollar amount of the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "total_amount"]
# Which organization received the largest grant?
grants[grants$total_amount == max(grants$total_amount), "organization"]
# Which organization received the smallest grant?
grants[grants$total_amount == min(grants$total_amount), "organization"]
# How many grants were awarded in 2010?
nrow(grants)
setwd("~/Documents/GitHub/a3-using-data-iheppe")
setwd("~/")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
setwd("~/Documents/GitHub/a3-using-data-iheppe")
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
View(life_exp_df)
get_col_mean <- function(column){
return (mean(column, na.rm = TRUE))
}
print(get_col_mean(life_exp_df[ ,"X2018"]))
world_averages <- list(lapply(life_exp_df[-1], get_col_mean))
world_change_18 <- (world_averages[["X2018"]] - world_averages[["X1918"]])
world_change_18 <- (world_averages$X2018 - world_averages$X1918)
world_change_18 <- world_averages$X2018
world_change_18 <- world_averages['X2018']
print(world_averages)
world_change_18 <- world_averages$X2018
print(world_averages$X2018)
print(world_averages[[X2018]])
print(world_averages[['X2018']])
print(world_averages$'X2018')
print(world_averages[["X2018"]])
print(world_averages["X2018"])
print(world_averages)
print(world_averages[[1]])
print(world_averages[[X2018]])
print(world_averages[["X2018"]])
print(world_averages[[101]])
print(world_averages[1, "X2018"])
print(world_averages[[1, "X2018"]])
print(world_averages[1]["X2018"])
print(world_averages[1][1])
excluded_col <- life_exp_df[[-1]]
excluded_col <- life_exp_df[-1]
excluded_col <- life_exp_df
excluded_col <- life_exp_df[][-1]
excluded_col <- life_exp_df[ ][-1]
print(world_averages[ ]["X1918"])
print(world_averages[1]["X1918"])
print(size(world_averages))
print(length(world_averages))
world_averages <- lapply(life_exp_df[-1], get_col_mean)
print(world_averages[["X1918"]])
world_change_18 <- (world_averages[["X2018"]] - world_averages[["X1918"]])
print(world_change_18)
life_exp_df$recent_change <- (life_exp_df[ ,life_exp_df$X2016] - life_exp_df[ ,life_exp_df$X1996])
recent_change <- (life_exp_df[ ,life_exp_df$X2016] - life_exp_df[ ,life_exp_df$X1996])
recent_change <- (life_exp_df[,"X2016"] - life_exp_df[,"X1996"])
recent_change <- list(life_exp_df[,"X2016"] - life_exp_df[,"X1996"])
View(life_exp_df)
life_exp_df$recent_change <- (life_exp_df[,"X2016"] - life_exp_df[,"X1996"])
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
cent_change < 1, "Country"]
print(num_small_gain)
num_small_gain <- life_exp_df[life_exp_df$recent_change < 1, "Country"]
print(num_small_gain)
num_small_gain <- life_exp_df[life_exp_df$recent_change < 1, ]
View(num_small_gain)
num_small_gain <- life_exp_df[life_exp_df$recent_change < 1, "country"]
print(num_small_gain)
num_small_gain <- life_exp_df[life_exp_df$recent_change < 1, "recent_change"]
print(num_small_gain)
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1, ])
print(num_small_gain)
View(life_exp_df)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change), "country"]
print(most_improved)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change), "recent_change"]
print(most_improved)
country
country
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change), "country"]
print(most_improved)
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE), "country"]
print(most_improved)
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (life_exp_df[,"X2018"] - life_exp_df[,"X1968"])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (dataframe[country,"X2018"] - dataframe[country,"X1968"])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
data <- dataframe
return (data[country,"X2018"] - data[country,"X1968"])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (dataframe)
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (dataframe[country,"X2018"])
}
print(get_country_change("Haiti", life_exp_df))
return (dataframe[dataframe$country,"X2018"])
get_country_change <- function(country, dataframe){
return (dataframe[dataframe$country,"X2018"])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (dataframe[,"X2018"])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country, dataframe){
return (dataframe[country,])
}
print(get_country_change("Haiti", life_exp_df))
get_country_change <- function(country_name, dataframe){
return (dataframe[dataframe$country == country_name,"X2018"] - dataframe[dataframe$country == country_name,"X1968"])
}
print(get_country_change("Haiti", life_exp_df))
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
compare_countries <- function(country_1, country_2, dataframe){
data <- dataframe[dataframe$country == country_1 | dataframe$country == country_2, "X2018" | "recent_change"]
return (data)
}
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
compare_countries <- function(country_1, country_2, dataframe){
values <- c("X2018", "recent_change")
data <- dataframe[dataframe$country == country_1 | dataframe$country == country_2, values]
return (data)
}
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
View(us_vs_cuba)
View(us_vs_cuba)
compare_countries <- function(country_1, country_2, dataframe){ # returns a small dataframe
# with the life expectancy from 2018 and the recent changes in the countries selected
values <- c("country", "X2018", "recent_change")
data <- dataframe[dataframe$country == country_1 | dataframe$country == country_2, values]
return (data)
}
us_vs_cuba <- compare_countries("United States", "Cuba", life_exp_df)
# compares life expectancy in the US and Cuba
install.packages(c("devtools", "fueleconomy"))
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
setwd("~/Documents/GitHub/a3-using-data-iheppe")
setwd("~/Documents/GitHub/book-exercises-clone/chapter-11-exercises/exercise-1")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
yes
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
install.packages(dplyr)
install.packages(dplyr)
install.packages("dplyr")
install.packages("pkgconfig")
install.packages("fueleconomy")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View("vehicles")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
View(vehicles)
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
View(flights)
View("flights")
install.packages("nycflights13")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("rlang")
install.packages("rlang")
install.packages("dplyr")
install.packages("nycflights13")
library("nycflights13")
install.packages("dplyr")
install.packages("nycflights13")
library("nycflights13")
View(flights)
library(dplyr)
library("dplyr")
